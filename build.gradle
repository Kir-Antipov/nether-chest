plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def minecraftDependencyVersion = project.minecraft_version.split(/[+ -]/)[0]

group = project.maven_group
version = "${project.mod_version}${getVersionMetadata()}"
archivesBaseName = "${project.archives_base_name}-mc${minecraftDependencyVersion}"

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

minecraft {
    accessWidenerPath = file("src/main/resources/netherchest.accesswidener")
}

processResources {
    def fabricModProperties = [
        "version": version,
        "minecraft": ">=${minecraftDependencyVersion}"
    ]

    filesMatching("fabric.mod.json") {
        expand fabricModProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    it.options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.md"
}

def getVersionMetadata() {
    // Release builds don't require additional metadata
    def release_tag = System.getenv("RELEASE_TAG")
    if (release_tag != null && release_tag.length() != 0) {
        return ""
    }

    // GitHub CI builds only
    def build_id = System.getenv("GITHUB_RUN_NUMBER")
    if (build_id != null && build_id.length() != 0) {
        return "+build.${build_id}"
    }

    if (grgit != null) {
        def head = grgit.head()
        def id = head.abbreviatedId

        // Flag the build if the build tree is not clean
        if (!grgit.status().clean) {
            id += "-dirty"
        }

        return "+rev.${id}"
    }

    // No tracking information could be found about the build
    return "+unknown"
}
